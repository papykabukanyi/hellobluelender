#!/usr/bin/env node

/**
 * Simplified Railway Setup Script
 * This script automatically copies all required environment variables to Railway
 */

const fs = require('fs');
const { execSync } = require('child_process');
const readline = require('readline');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Ask a question and get a response
function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// Simple function to read .env.local file
function getEnvVars() {
  try {
    const envPath = path.join(process.cwd(), '.env.local');
    const content = fs.readFileSync(envPath, 'utf-8');
    const vars = {};

    content.split('\n').forEach(line => {
      // Skip comments and empty lines
      if (!line || line.trim().startsWith('#')) return;
      
      const match = line.match(/^([^=]+)=(.*)$/);
      if (match) {
        const key = match[1].trim();
        const value = match[2].trim();
        vars[key] = value;
      }
    });
    
    console.log("✅ Successfully loaded variables from .env.local");
    return vars;
  } catch (error) {
    console.error("❌ Failed to read .env.local:", error.message);
    console.error("Make sure .env.local exists in the current directory.");
    process.exit(1);
  }
}

// Required variables with defaults
const requiredVars = {
  // Define required variables with default values (if .env.local doesn't have them)
  REDIS_URL: null,
  JWT_SECRET_KEY: null,
  SMTP_HOST: 'smtp.gmail.com',
  SMTP_PORT: '587',
  SMTP_USER: null,
  SMTP_PASS: null,
  SMTP_FROM: null,
  SMTP_FROM_NAME: null,
  GEMINI_API_KEY: null,
  NODE_ENV: 'production',
  // Special handling for DATABASE_URL - use Railway's PostgreSQL variables
  DATABASE_URL: 'postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}'
};

async function main() {
  console.log("=== Railway Environment Setup ===");
  
  // Check for dry run mode
  const isDryRun = process.argv.includes('--dry-run');
  if (isDryRun) {
    console.log("⚠️ DRY RUN MODE: Variables will not actually be set");
  }
  
  // Check for Railway CLI
  if (!isDryRun) {
    try {
      execSync('railway --version', { stdio: 'ignore' });
    } catch (error) {
      console.error("❌ Railway CLI not found. Please install it with:");
      console.error("npm install -g @railway/cli");
      process.exit(1);
    }
  }
  
  // Check if logged in
  if (!isDryRun) {
    try {
      execSync('railway whoami', { stdio: 'ignore' });
    } catch (error) {
      console.error("❌ Not logged in to Railway. Please run:");
      console.error("railway login");
      process.exit(1);
    }
  }
  
  // Get variables from .env.local
  const envVars = getEnvVars();
  
  // Combine with required vars, prioritizing .env.local values
  const allVars = {};
  for (const [key, defaultValue] of Object.entries(requiredVars)) {
    allVars[key] = envVars[key] || defaultValue;
  }
  
  // Display variables that will be set (mask sensitive ones)
  console.log("\nThe following variables will be set in Railway:");
  Object.entries(allVars).forEach(([key, value]) => {
    // Mask sensitive values
    const isSensitive = key.includes('KEY') || key.includes('SECRET') || key.includes('PASS') || key.includes('TOKEN');
    const displayValue = isSensitive && value ? '******' : value;
    console.log(`• ${key}: ${displayValue || '(empty)'}`);
  });
  
  // Get confirmation
  const proceed = await ask("\nProceed with setting these variables? (Y/n): ");
  if (proceed.toLowerCase() === 'n') {
    console.log("Operation canceled.");
    process.exit(0);
  }
  
  // Set the variables
  console.log("\nSetting environment variables on Railway...");
  for (const [key, value] of Object.entries(allVars)) {
    if (value) {
      try {
        if (!isDryRun) {
          execSync(`railway variables set ${key}="${value}"`, { stdio: 'inherit' });
          console.log(`✓ Set ${key}`);
        } else {
          console.log(`[DRY RUN] Would set ${key}`);
        }
      } catch (error) {
        console.error(`✗ Failed to set ${key}: ${error.message}`);
      }
    } else {
      console.warn(`⚠️ Skipping ${key} - no value provided`);
    }
  }
  
  console.log("\n=== Setup Complete ===");
  console.log("You can now deploy your application with:");
  console.log("railway up");
  
  rl.close();
}

main().catch(error => {
  console.error("Error:", error);
  process.exit(1);
});
